/*
onpremless

onpremless api

API version: 1.0.2
Contact: ilya.sumb@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opless

import (
	"encoding/json"
)

// checks if the BaseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseObject{}

// BaseObject struct for BaseObject
type BaseObject struct {
	Id string `json:"id"`
	Name string `json:"name"`
	CreatedAt int64 `json:"created_at"`
	UpdatedAt int64 `json:"updated_at"`
}

// NewBaseObject instantiates a new BaseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseObject(id string, name string, createdAt int64, updatedAt int64) *BaseObject {
	this := BaseObject{}
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewBaseObjectWithDefaults instantiates a new BaseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseObjectWithDefaults() *BaseObject {
	this := BaseObject{}
	return &this
}

// GetId returns the Id field value
func (o *BaseObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BaseObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BaseObject) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *BaseObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseObject) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BaseObject) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BaseObject) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BaseObject) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *BaseObject) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *BaseObject) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *BaseObject) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

func (o BaseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

type NullableBaseObject struct {
	value *BaseObject
	isSet bool
}

func (v NullableBaseObject) Get() *BaseObject {
	return v.value
}

func (v *NullableBaseObject) Set(val *BaseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseObject(val *BaseObject) *NullableBaseObject {
	return &NullableBaseObject{value: val, isSet: true}
}

func (v NullableBaseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


